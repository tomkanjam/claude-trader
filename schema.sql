-- Claude Trader Database Schema
-- DuckDB: Embedded analytics database for strategy management and analysis

-- ============================================================================
-- Strategies Table
-- ============================================================================
-- Stores metadata for all created trading strategies
CREATE TABLE IF NOT EXISTS strategies (
  id VARCHAR PRIMARY KEY,                    -- Unique identifier (e.g., 'btc-rsi-whale')
  name VARCHAR NOT NULL,                     -- Human-readable name
  description TEXT,                          -- What this strategy does
  status VARCHAR DEFAULT 'active',           -- 'active', 'paused', 'stopped'
  interval VARCHAR NOT NULL,                 -- '1m', '5m', '15m', '1h', '4h', '1d'
  trading_pair VARCHAR,                      -- e.g., 'BTC/USD', 'ETH/USD'
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  config JSON                                -- Full configuration as JSONB
);

-- Index for filtering active strategies
CREATE INDEX IF NOT EXISTS idx_strategies_status ON strategies(status);

-- ============================================================================
-- Analysis Results Table (Time-Series)
-- ============================================================================
-- Stores every analysis result generated by strategies
CREATE TABLE IF NOT EXISTS analysis_results (
  id INTEGER PRIMARY KEY,
  strategy_id VARCHAR NOT NULL,
  timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  signal VARCHAR NOT NULL,                   -- 'BUY', 'SELL', 'HOLD'
  confidence DECIMAL(5,2),                   -- 0.00 to 100.00
  reasoning TEXT,                            -- Explanation of the signal
  data JSON,                                 -- Full sub-agent results and metadata
  execution_time_ms INTEGER,                 -- Time taken to execute strategy

  FOREIGN KEY (strategy_id) REFERENCES strategies(id)
);

-- Indexes for time-series queries
CREATE INDEX IF NOT EXISTS idx_analysis_strategy_time
  ON analysis_results(strategy_id, timestamp DESC);
CREATE INDEX IF NOT EXISTS idx_analysis_signal
  ON analysis_results(signal, timestamp DESC);

-- ============================================================================
-- Execution Logs Table
-- ============================================================================
-- Tracks every strategy execution attempt (success or failure)
CREATE TABLE IF NOT EXISTS executions (
  id INTEGER PRIMARY KEY,
  strategy_id VARCHAR NOT NULL,
  started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  completed_at TIMESTAMP,
  status VARCHAR NOT NULL,                   -- 'success', 'error', 'timeout'
  error_message TEXT,                        -- Error details if failed
  tokens_used INTEGER,                       -- Claude API tokens consumed
  cost_usd DECIMAL(10,4),                    -- Estimated cost in USD

  FOREIGN KEY (strategy_id) REFERENCES strategies(id)
);

-- Index for execution history queries
CREATE INDEX IF NOT EXISTS idx_executions_strategy
  ON executions(strategy_id, started_at DESC);
CREATE INDEX IF NOT EXISTS idx_executions_status
  ON executions(status, started_at DESC);

-- ============================================================================
-- Views for Common Queries
-- ============================================================================

-- Latest analysis result per strategy
CREATE OR REPLACE VIEW latest_analysis AS
SELECT DISTINCT ON (strategy_id)
  strategy_id,
  timestamp,
  signal,
  confidence,
  reasoning,
  execution_time_ms
FROM analysis_results
ORDER BY strategy_id, timestamp DESC;

-- Strategy performance summary
CREATE OR REPLACE VIEW strategy_performance AS
SELECT
  s.id,
  s.name,
  s.status,
  COUNT(DISTINCT a.id) as total_analyses,
  COUNT(DISTINCT CASE WHEN a.signal = 'BUY' THEN a.id END) as buy_signals,
  COUNT(DISTINCT CASE WHEN a.signal = 'SELL' THEN a.id END) as sell_signals,
  COUNT(DISTINCT CASE WHEN a.signal = 'HOLD' THEN a.id END) as hold_signals,
  AVG(a.confidence) as avg_confidence,
  AVG(a.execution_time_ms) as avg_execution_time_ms,
  MAX(a.timestamp) as last_analysis
FROM strategies s
LEFT JOIN analysis_results a ON s.id = a.strategy_id
GROUP BY s.id, s.name, s.status;

-- Execution success rate
CREATE OR REPLACE VIEW execution_stats AS
SELECT
  strategy_id,
  COUNT(*) as total_executions,
  COUNT(CASE WHEN status = 'success' THEN 1 END) as successful,
  COUNT(CASE WHEN status = 'error' THEN 1 END) as errors,
  COUNT(CASE WHEN status = 'timeout' THEN 1 END) as timeouts,
  ROUND(100.0 * COUNT(CASE WHEN status = 'success' THEN 1 END) / COUNT(*), 2) as success_rate,
  SUM(tokens_used) as total_tokens,
  SUM(cost_usd) as total_cost_usd
FROM executions
GROUP BY strategy_id;

-- Recent activity (last 24 hours)
CREATE OR REPLACE VIEW recent_activity AS
SELECT
  a.strategy_id,
  s.name as strategy_name,
  a.timestamp,
  a.signal,
  a.confidence,
  a.reasoning
FROM analysis_results a
JOIN strategies s ON a.strategy_id = s.id
WHERE a.timestamp > NOW() - INTERVAL '24 hours'
ORDER BY a.timestamp DESC;

-- ============================================================================
-- Sample Queries for Common Use Cases
-- ============================================================================

-- Get all active strategies with their latest signal
-- SELECT s.id, s.name, l.signal, l.confidence, l.timestamp
-- FROM strategies s
-- LEFT JOIN latest_analysis l ON s.id = l.strategy_id
-- WHERE s.status = 'active';

-- Get signal history for a specific strategy
-- SELECT timestamp, signal, confidence, reasoning
-- FROM analysis_results
-- WHERE strategy_id = 'btc-rsi-whale'
-- ORDER BY timestamp DESC
-- LIMIT 100;

-- Calculate win rate (if you track actual trades)
-- SELECT
--   strategy_id,
--   COUNT(*) as total_signals,
--   AVG(confidence) as avg_confidence
-- FROM analysis_results
-- WHERE signal IN ('BUY', 'SELL')
-- GROUP BY strategy_id;

-- Find strategies that haven't run recently
-- SELECT s.id, s.name, s.status, MAX(e.started_at) as last_run
-- FROM strategies s
-- LEFT JOIN executions e ON s.id = e.strategy_id
-- WHERE s.status = 'active'
-- GROUP BY s.id, s.name, s.status
-- HAVING MAX(e.started_at) < NOW() - INTERVAL '1 hour'
-- OR MAX(e.started_at) IS NULL;

-- Export analysis results to Parquet for backtesting
-- COPY (
--   SELECT * FROM analysis_results
--   WHERE strategy_id = 'btc-rsi-whale'
-- ) TO 'analysis_export.parquet' (FORMAT PARQUET);

-- Query JSON data within analysis results
-- SELECT
--   strategy_id,
--   timestamp,
--   signal,
--   json_extract(data, '$.sub_agent_results.rsi_analyzer.rsi') as rsi_value
-- FROM analysis_results
-- WHERE strategy_id = 'btc-rsi-whale'
-- ORDER BY timestamp DESC
-- LIMIT 20;
